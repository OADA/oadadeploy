#! /bin/bash

GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
CYAN=$'\033[0;36m'
NC=$'\033[0m' # No Color

# If no OADA_HOME, set it to the absolute path of this script
if ! test -d OADA_HOME; then
  OADA_HOME="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
fi
cd "${OADA_HOME}"


# One-off to run yq via docker on a file:
yq() {
  docker run --rm -i -v "${PWD}":/workdir mikefarah/yq "$@"
}
fetch_oada() {
  # $1 is oada version to fetch
  curl -fsSL https://api.github.com/repos/oada/oada-srvc-docker/$1/docker-compose.yml > docker-compose.yml
}

#-----------------------------------------------------------------------------
# oada admin
admin() {
  CMD=$1
  shift
  case $CMD in
    extendToken)
      echo "${YELLOW}docker-compose run --rm auth extendToken $@${NC}"
      docker-compose run --rm auth extendToken $@
    ;;

    useradd) 
      echo "${YELLOW}docker-compose run --rm user add $@${NC}"
      docker-compose run --rm user add $@
    ;;

    bash)
      echo "${YELLOW}docker-compose run --rm user add $@${NC}"
      docker-compose run --rm user add $@
    ;;

    *)
      echo "${YELLOW}docker run --rm -v .:/code admin $@${NC}"
      docker run --rm -v .:/code admin $@
    ;;
  esac
}

migrate() {
  echo "MIGRATE: TODO!"
}

upgrade() {
  echo "--- UPGRADE: TODO ---"
}

ensure_bash_completion_in_bashrc() {
  # set OADA_HOME in bashrc
  # line after that just loads bash-completion from OADA_HOME/bash_completion
  if grep -q "OADA_HOME" ~/.bashrc; then
    # Replace OADA_HOME line w/ new OADA_HOME
    cat ~/.bashrc | sed "s:^OADA_HOME.*$:OADA_HOME=\"${OADA_HOME}\":" > /tmp/bashrc \
    && mv /tmp/bashrc ~/.bashrc
  else
    # Add both OADA_HOME and bash-completion lines to bashrc
    echo "OADA_HOME=\"${OADA_HOME}\"" >> ~/.bashrc
    echo '[[ -r ${OADA_HOME}/.oada/bash-completion ]] && . ${OADA_HOME}/.oada/bash-completion' >> ~/.bashrc
  fi
}

usage() {
  echo -e "Manage local oada installation and supporting services."
  echo -e ""
  echo -e "${GREEN}USAGE: $0 [--dev] [COMMAND] [ARGS...]${NC}"
  echo -e "OADA Commands: "
  echo -e "   ${CYAN}init${NC}\t\tInitialize current directory w/ oada and supporting structure"
  echo -e "   ${CYAN}upgrade${NC}\tUpgrade current oada to a different version"
  echo -e "   ${CYAN}admin${NC}\tRun oada admin command, refer to admin help for specific commands"
  echo -e "   ${CYAN}domain${NC}\tSetup or modify a domains"
  echo -e "   ${CYAN}service${NC}\tInstall, upgrade, enable, or disable specific supporting services"
  echo -e ""
  echo -e "docker-compose commands supported as passthru w/ bash-completion (refer to docker-compose documentation):"
  echo -e "   ${YELLOW}build, config, create, down, events, exec, help, images, kill, logs, pause,"
  echo -e "   port, ps, pull, push, restart, rm, run, scale, start, stop, top, unpause, up${NC}"
  echo -e ""
  echo -e "OADA_HOME env var sets which oada is used for bash_completion (currently ${OADA_HOME})"
  exit 0;
 
}

init() {
  # Create the necessary folder structure:
  mkdir -p support domains services .oada
  # Setup and maintain a ./.oada/ folder to drive bash_completion and store other info
  # store OADA_HOME in bash-completion, default to current env
  echo "[ ! -z \${OADA_HOME} ] && OADA_HOME=\"${OADA_HOME}\"" > .oada/bash-completion
  docker run --rm oada/admin cat /support/bash-completion >> .oada/bash-completion
  ensure_bash_completion_in_bashrc

  # symlink at /usr/local/bin to run from anywhere
  read -p "${GREEN}Make this ${NC}oada${GREEN} script default on this machine?${NC} [Y|n] " YN
  if [[ "x$YN" =~ xy|xY ]]; then
    echo -e "\tSymlinking to /usr/local/bin/oada"
    ln -s "$OADA_HOME" /usr/local/bin/oada
  fi

  # If no docker-compose, pull one
  if [ ! -f docker-compose.yml ]; then
    read -p "${GREEN}What oada version would you like to use? ${NC}[latest] " OADA_VERSION
    if [ "x$OADA_VERSION" -eq "x" ]; then 
      OADA_VERSION="latest"
    fi
    fetch_oada ${OADA_VERSION}
  fi

  # If no overrides, go ahead and make an empty one
  if [ ! -f docker-compose.override.yml ]; then
    touch docker-compose.override.yml
  fi

  echo -e "${CYAN}Initialization complete.${NC}"
  echo -e "${YELLOW}Some things to do now:${NC}"
  echo -e "    source ${OADA_HOME}/.oada/bash-completion"
  echo -e "    oada migrate /path/to/old/git/version/of/oada"
  echo -e "    oada domain add <my.domain>"
  echo -e "    oada service install trellisfw/target-helper"
}

compose() {
  # Warn on dummy tokens?
  local command=$1
  shift;
  case $command in

    # Default logs to -f --tail=200
    logs) 
      if test "$#" -gt 0; then logs $@
      else  logs -f --tail=200
      fi
    ;;

    *) docker-compose $command $@ ;;
  esac
}

NETPARAMS="$@"
DEV=false
if [ "$#" -lt 1 ]; then
  usage
  exit 1;
fi

for i in "$@"; do
  case $i in
    # Exact list of docker-compose commands to pass thru
    build|config|create|down|events|exec|help|images|kill|logs|pause|port|ps|pull|push|restart|rm|run|scale|start|stop|top|unpause|up) 
      compose ${NETPARAMS}
      break

    ;;

    admin) 
      NETPARAMS=${NETPARAMS#admin}
      admin ${NETPARAMS}
      break 

    ;;
    init)
      NETPARAMS=${NETPARAMS#init}
      init ${NETPARAMS}
      break

    ;;
    # word/option for inserting/removing dummy users/tokens?

    upgrade)
      NETPARAMS=${NETPARAMS#upgrade}
      upgrade ${NETPARAMS}
      break

    ;;

    # Setup/modify domains
    domain)
      NETPARAMS=${NETPARAMS#domain}
      domain ${NETPARAMS}
      break

    ;;
    # Interact with individual services
    service)
      NETPARAMS=${NETPARAMS#service}
      service ${NETPARAMS}
      break

    ;;

    # Migrate from older git-based installation
    migrate)
      NETPARAMS=${NETPARAMS#migrate}
      migrate ${NETPARAMS}
      break
    
    ;;
    help|--help|-h)
      usage $@
      break

    ;;
    *) 
      usage $@
      break

    ;;
  esac
done


# oada admin -> run an admin command, e.g. oada admin useradd, oada admin extendToken

# IF I CAN FIGURE OUT yq MERGE, CAN JUST KEEP A "base" ALL THE TIME AND THEN NO NEED TO "DELETE", JUST
# OVERWRITE THE FINAL MERGED THING.  KEEP BACKUP OF ORIGINAL. -> local/docker-compose.overrides.yml
# --> docker-compose --no-interpolate config -f ... -f ...
# - need a "priority" 
# - how to deal with the "root" path's?  I think it's only under volumes key, could try yq?
# - docker-compose config --services -> bash_completion!

# oada service fetch trellis-shares -> pull latest release docker-compose to $OADAHOME/services/trellis-shares, rebuild docker-compose.services.yml
# oada service enable trellis-shares -> add $OADAHOME/services/trellis-shares to docker-compose.services.yml
# oada service disable trellis-shares -> remove $OADAHOME/services/trellis-shares from docker-compose.services.yml

# oada migrate --from=/previous/oada-srvc-docker -> warn that we're only doing *-enabled, double-check *-available
#                                                   copy services-enabled to new oada home
#                                                   copy domains-enabled to new oada home
#                                                   asks what you want project name to be in docker, default oada-srvc-docker
#                                                   check docker for volumes w/ oada-srvc-docker as old name if new is not that, prompt then copy to new oada volumes
#                                                   create docker-compose.overrides.yml w/ domains in auth/proxy
#                                                   explicit build step

# install: curl <installer> | bash -> asks you where you want your oada support to live,
#                                     puts this script in that folder under bin/,
#                                     adds that bin folder to your path,

# oada logs auth -> default --tail=200 -f
# oada up -> default -d, brings up both oada AND services, but as 2 separate commands
# oada exec <container> <command> -> normal

#OLDPWD=`pwd`
#SCRIPT=${BASH_SOURCE[0]}
## Note: since we symlink script, need to follow symlink to get path.
## This should use readlink -f, but -f doesn't work on Mac:
#if [ -L ${SCRIPT} ]; then
#  SCRIPT=$(readlink ${SCRIPT})
#fi;
#OADABASEDIR="$( cd "$( dirname "${SCRIPT}" )" >/dev/null 2>&1 && pwd )"
#GREEN='\033[0;32m'
#YELLOW='\033[1;33m'
#CYAN='\033[0;36m'
#NC='\033[0m' # No Color
#
#
##############################################
## Usage/Help:
##############################################
#
#if [[ $@ == *"--help"* ]]; then
#  echo -e "${GREEN}USAGE: $0 <anything you would have typed after \"docker-compose\">${NC}"
#  echo -e "    will just put together all the compose files and call docker-compose"
#  echo -e "OR..."
#  echo -e "${GREEN}oada --install${NC}"
#  echo -e "    will symlink oada to /usr/local/bin, run the yarn container once, and add bash-completion"
#  exit 0;
#fi;
#
#
##############################################
## Installation/Setup:
##############################################
#
#if [[ $@ == *"--install-self"* ]]; then
#  # Add to path:
#  INSTALLPATH="/usr/local/bin"
#  echo -e "${GREEN}Install: 1 of 3:${NC} Symlinking oada script to /usr/local/bin" >&2
#  if [ ! -e "${INSTALLPATH}" ]; then
#    mkdir -p "${INSTALLPATH}"
#  fi
#  if [ ! -e "${INSTALLPATH}/oada" ]; then
#    ln -s ${OADABASEDIR}/oada ${INSTALLPATH}/oada
#  fi
#
#  # Run yarn container to ensure node_modules are created
#  echo -e "${GREEN}Install: 2 of 3:${NC} running yarn container to ensure all node_modules" >&2
#  if [ ! -e "${OADABASEDIR}/oada-core/http-handler/oada-srvc-http-handler/node_modules" ]; then
#    ${OADABASEDIR}/oada run --rm yarn
#  else
#    echo -e "${YELLOW}Looks like yarn already ran, no need to repeat...${NC}" >&2
#  fi
#
#  # bash-completion setup
#  echo -e "${GREEN}Install: 3 of 3:${NC} adding bash completion for core and service names" >&2
#
#  if [ ! -e "~/.oada" ]; then 
#    mkdir -p ~/.oada 
#  fi
#  echo "OADABASEDIR=\"${OADABASEDIR}\"" > ~/.oada/bash-completion
#  cat "${OADABASEDIR}/scripts/bash-completion" >> ~/.oada/bash-completion
#  if [ ! -e ~/.bashrc ]; then
#    touch ~/.bashrc
#  fi
#  if grep -q ".oada/bash-completion" ~/.bashrc; then
#    echo -e "${YELLOW}Not changing ~/.bashrc because it already has oada bash-completion${NC}" >&2
#  else
#    LINETOADD="[[ -r ~/.oada/bash-completion ]] && . ~/.oada/bash-completion"
#    echo -e "${YELLOW}Appending to ~/.bashrc: ${LINETOADD}${NC}" >&2
#    echo "${LINETOADD}" >> ~/.bashrc
#  fi
#  echo -e "${YELLOW}Now you need to source ~/.bashrc in order to get bash-completion${NC}" >&2
#
#  exit 0;
#fi;
#
#
##############################################
## The Main Event:
##############################################
#
#COMPOSEFILES=" -f docker-compose.yml -f oada-core/base-docker-compose.yml -f oada-core/docker-compose.yml"
#if [[ $@ == *"--dev"* ]]; then
#  COMPOSEFILES="${COMPOSEFILES} -f dev-docker-compose.yml"
#  ARGS=$(echo "$@" | sed "s/--dev *//")
#  if [ $(which mutagen 2> /dev/null) ]; then
#    COMPOSE="mutagen compose"
#    COMPOSEFILES="${COMPOSEFILES} -f mutagen-compose.yml -f dev-docker-compose.yml"
#  else
#    echo -e "${YELLOW}Install mutagen for better dev mode${NC}" >&2
#    COMPOSE="docker-compose"
#    COMPOSEFILES="${COMPOSEFILES} -f dev-docker-compose.yml"
#  fi
#else
#  ARGS=$@
#  COMPOSE="docker-compose"
#fi
#
#cd $OADABASEDIR
#for i in `ls services-enabled`; do
#  COMPOSEFILES="$COMPOSEFILES -f services-available/$i/docker-compose.yml"
#done
#
#echo -e "${GREEN}docker-compose ${CYAN}${COMPOSEFILES} ${YELLOW}$ARGS${NC}" >&2
#$COMPOSE $COMPOSEFILES $ARGS
#cd $OLDPWD
